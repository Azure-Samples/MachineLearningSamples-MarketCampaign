## Step 9.1. Prepare for Operationalization Locally 
Local mode deployments run in Docker containers on your local computer, whether that is your desktop or a Linux VM running on Azure. You can use local mode for development and testing. The Docker engine must be running locally to complete the operationalization steps as shown in the following steps.

Let's prepare the operationalization environment. In the command line window type the following to set up the environment for local operationalization:

```batch
az ml env setup -n <your environment name> -g <resource group> -l <resources location> 
```
>If you need to scale out your deployment (or if you don't have Docker engine installed locally, you can choose to deploy the web service on a cluster. In cluster mode, your service is run in the Azure Container Service (ACS). The operationalization environment provisions Docker and Kubernetes in the cluster to manage the web service deployment. Deploying to ACS allows you to scale your service as needed to meet your business needs. To deploy web service into a cluster, add the _--cluster_ flag to the set up command. For more information, enter the _--help_ flag.

Follow the instructions to provision an Azure Container Registry (ACR) instance and a storage account in which to store the Docker image we are about to create. 

![Env Setup](media/tutorial-market-campaign/env_setup.png)

After the setup is complete, set the environment variables required for operationalization using the following command:
```batch
az ml env set -n <your environment name> -g <resource group>
```
![Env Set](media/tutorial-market-campaign/env_set.png)

You can check the credentials of the environment using the following command:
```batch
az ml env get-credentials -g <resource group> -n <your environment name>
```
Or, execute the .amlenvrc.cmd file from the command line if you are using docker on local PC.

```batch
c:\Users\<username>\.amlenvrc.cmd
```
To verify that you have properly configured your operationalization environment for local web service deployment, enter the following command:
```batch
az ml env local
```
## Step 10. Create a Realtime Web Service

### Schema and Score

To deploy the web service, you must have a model, a scoring script, and optionally a schema for the web service input data. The scoring script loads the dt.pkl file from the current folder and uses it to produce a new predicted class. The input to the model is features.

To generate the scoring and schema files, execute the market_schema_gen.py file that comes with the sample project in the AMLWorkbench CLI command prompt using Python interpreter directly.

```
python market_schema_gen.py
```

This will create market_service_schema.json (this file contains the schema of the web service input)

### Model Management

The real-time web service requires a modelmanagement account. This can be created using the following commands:

```
az group create -l <location> -n <name>
az ml account modelmanagement create -l <location> -g <resource group> -n <account name>
az ml account modelmanagement set -n <account name> -g <resource group>
```

To create the real-time web service, run the following command:
```
az ml service create realtime -f market_score.py --model-file dt.pkl -s market_service_schema.json -n marketservice -r python
```
![service create](media/tutorial-market-campaign/marketservice_create.png)

The different az ml service create realtime command parameters are as follows:
* -n: service name, must be lower case.
* -f: scoring script file name
* --model-file: model file, in this case it is the pickled sklearn model dt.pkl
* -r: type of model, in this case it is the scikit-learn model.

By executing the above command, the model and the scoring file are uploaded into an Azure service that we manage. As part of deployment process, the operationalization component uses the pickled model dt.pkl and market_score.py to build a Docker image named <ACR_name>.azureacr.io/marketservice. It registers the image with your Azure Container Registry (ACR) service, pulls down that image locally to your computer, and starts a Docker container based on that image. As part of the deployment, an HTTP REST endpoint for the web service is created on your local machine.

Run docker ps to see the churn image as shown below:

![docker ps](media/tutorial-market-campaign/docker_ps.PNG)

To test the service, execute the returned service run command as follows. For example, the command that is executed below is:

```
az ml service run realtime -i marketservice -d "{\"input_df\": [{\"day\": 19, \"education\": \"unknown\", \"poutcome\": \"unknown\", \"age\": 30, \"default\": \"yes\", \"marital\": \"divorced\", \"loan\": \"no\", \"housing\": \"no\", \"contact\": \"telephone\", \"month\": \"oct\", \"balance\": 1787, \"campaign\": 1, \"job\": \"admin.\", \"duration\": 79, \"pdays\": -1, \"previous\": 0}]}"
```

![service run](media/tutorial-market-campaign/marketservice_run.png)

